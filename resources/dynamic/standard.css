/* standard.css */
{%
Dim headerColourPrimary = CurrentADC.PropValue("headerColourPrimary")
Dim headerFontColour = CurrentADC.PropValue("headerFontColour")
Dim headerGroupPadding = CurrentADC.PropValue("headerGroupPadding")
Dim headerHoverColourPrimary = CurrentADC.PropValue("headerHoverColourPrimary")
Dim headerGroupBorderColor = CurrentADC.PropValue("headerGroupBorderColor")

Dim headerTextAlign = CurrentADC.PropValue("headerTextAlign")

Dim symbolPosition = "left"
IF headerTextAlign = "left" Then
		symbolPosition = "right"
EndIF

Dim labelColourPrimary = CurrentADC.PropValue("labelColourPrimary")
Dim fontColour = CurrentADC.PropValue("fontColour")
Dim labelShadow = CurrentADC.PropValue("labelShadow")
Dim textAlign = CurrentADC.PropValue("textAlign")
Dim imageAlign = CurrentADC.PropValue("imageAlign")
Dim displayLabelText = CurrentADC.PropValue("displayLabelText")

Dim borderColour = CurrentADC.PropValue("borderColour")
Dim borderThickness = CurrentADC.PropValue("borderThickness")
Dim borderStyle = CurrentADC.PropValue("borderStyle")

Dim labelTextPadding = CurrentADC.PropValue("labelTextPadding")
Dim labelTextLineHeight = CurrentADC.PropValue("labelTextLineHeight")

Dim fontSize = CurrentADC.PropValue("fontSize")

Dim labelWidth = CurrentADC.PropValue("labelWidth")
Dim sliderHeight = CurrentADC.PropValue("sliderHeight")
Dim sliderOrientation = CurrentADC.PropValue("sliderOrientation")
Dim controlAlign = CurrentADC.PropValue("controlAlign")
Dim sliderBasePrimaryColour = CurrentADC.PropValue("sliderBasePrimaryColour")
Dim sliderBaseSecondaryColour = CurrentADC.PropValue("sliderBaseSecondaryColour")
Dim sliderBaseBorderColour = CurrentADC.PropValue("sliderBaseBorderColour")
Dim sliderBaseBorderThickness = CurrentADC.PropValue("sliderBaseBorderThickness")
Dim sliderBaseBorderStyle = CurrentADC.PropValue("sliderBaseBorderStyle")
Dim sliderBaseBorderRadius = CurrentADC.PropValue("sliderBaseBorderRadius")
Dim sliderHandlePrimaryColour = CurrentADC.PropValue("sliderHandlePrimaryColour")
Dim sliderHandleBorderColour = CurrentADC.PropValue("sliderHandleBorderColour")
Dim sliderHandleBorderThickness = CurrentADC.PropValue("sliderHandleBorderThickness")
Dim sliderHandleBorderStyle = CurrentADC.PropValue("sliderHandleBorderStyle")
Dim sliderHandleBorderRadius = CurrentADC.PropValue("sliderHandleBorderRadius")
Dim sliderHandleDropShadow = CurrentADC.PropValue("sliderHandleDropShadow")
Dim sliderSelectedPrimaryColour = CurrentADC.PropValue("sliderSelectedPrimaryColour")
Dim sliderSelectedSecondaryColour = CurrentADC.PropValue("sliderSelectedSecondaryColour")
Dim labelBorderRadius = CurrentADC.PropValue("labelBorderRadius")

Dim showValue = CurrentADC.PropValue("showValue")

Dim sliderFocusPrimaryColour = CurrentADC.PropValue("sliderFocusPrimaryColour")
Dim sliderFocusBorderColour = CurrentADC.PropValue("sliderFocusBorderColour")
Dim sliderFocusBorderThickness = CurrentADC.PropValue("sliderFocusBorderThickness")
Dim handleFontColour = CurrentADC.PropValue("handleFontColour")

Dim captionAlign = CurrentADC.PropValue("captionAlign")
Dim captionPadding = CurrentADC.PropValue("captionPadding")

Dim sliderBaseHeight = CurrentADC.PropValue("sliderBaseHeight")
Dim sliderHandleHeight = CurrentADC.PropValue("sliderHandleHeight")
Dim sliderHandleWidth = CurrentADC.PropValue("sliderHandleWidth")
Dim halfHandleHeight = (sliderBaseHeight.ToNumber() - sliderHandleHeight.ToNumber())/2
Dim halfHandleWidth = sliderHandleWidth.ToNumber()/2
IF CurrentADC.PropValue("sliderOrientation") = "vertical" Then
	Dim sliderHandleBorderThicknessNumber = sliderHandleBorderThickness
		sliderHandleBorderThicknessNumber = sliderHandleBorderThicknessNumber.Replace("px","")
		sliderHandleBorderThicknessNumber = sliderHandleBorderThicknessNumber.Replace("%","")
		sliderHandleBorderThicknessNumber = sliderHandleBorderThicknessNumber.Replace("none","0")
    IF sliderHandleBorderThicknessNumber.Right(2) = "em" Then
        sliderHandleBorderThicknessNumber = "1"
    EndIf
	halfHandleWidth = ((sliderHandleWidth.ToNumber() + (sliderHandleBorderThicknessNumber.ToNumber()*2)) - sliderBaseHeight.ToNumber() )/2
	halfHandleHeight = (sliderHandleHeight.ToNumber() + (sliderHandleBorderThicknessNumber.ToNumber()*2))/2
EndIF

Dim imagePadding = CurrentADC.PropValue("imagePadding")

Dim sliderBaseGradientDirection = CurrentADC.PropValue("sliderBaseGradientDirection")

Dim dkBorderRadius = CurrentADC.PropValue("dkBorderRadius")
Dim dkTextPadding = CurrentADC.PropValue("dkTextPadding")
Dim dkMargin = CurrentADC.PropValue("dkMargin")
Dim dkColourPrimary = CurrentADC.PropValue("dkColourPrimary")
Dim dkFontColour = CurrentADC.PropValue("dkFontColour")
Dim dkBorderColour = CurrentADC.PropValue("dkBorderColour")
Dim dkBorderThickness = CurrentADC.PropValue("dkBorderThickness")
Dim dkBorderStyle = CurrentADC.PropValue("dkBorderStyle")
Dim dkShadow = CurrentADC.PropValue("dkShadow")
Dim showDkHoverColour = CurrentADC.PropValue("showDkHoverColour")
Dim dkHoverColourPrimary = CurrentADC.PropValue("dkHoverColourPrimary")
Dim showDkHoverFontColour = CurrentADC.PropValue("showDkHoverFontColour")
Dim dkHoverFontColour = CurrentADC.PropValue("dkHoverFontColour")
Dim showDkHoverBorder = CurrentADC.PropValue("showDkHoverBorder")
Dim dkHoverBorderColour = CurrentADC.PropValue("dkHoverBorderColour")
Dim dkHoverBorderThickness = CurrentADC.PropValue("dkHoverBorderThickness")
Dim dkHoverBorderStyle = CurrentADC.PropValue("dkHoverBorderStyle")
Dim showDkHoverShadow = CurrentADC.PropValue("showDkHoverShadow")
Dim dkHoverShadow = CurrentADC.PropValue("dkHoverShadow")
Dim dkSelectedColourPrimary = CurrentADC.PropValue("dkSelectedColourPrimary")
Dim dkSelectedFontColour = CurrentADC.PropValue("dkSelectedFontColour")
Dim dkSelectedBorderColour = CurrentADC.PropValue("dkSelectedBorderColour")
Dim dkSelectedBorderThickness = CurrentADC.PropValue("dkSelectedBorderThickness")
Dim dkSelectedBorderStyle = CurrentADC.PropValue("dkSelectedBorderStyle")
Dim dkSelectedShadow = CurrentADC.PropValue("dkSelectedShadow")

Dim useHandleImage = CurrentADC.PropValue("useHandleImage")

Dim showMarkerText = CurrentADC.PropValue("showMarkerText")

Dim hideCaption = CurrentADC.PropValue("hideCaption")

Dim markerColor = CurrentADC.PropValue("sliderMarkerColor")

%}

.colored {
	background-color: red;
}

#adc_{%= CurrentADC.InstanceId%} .sliderContainer {
	position:relative;
	text-align:{%= controlAlign%};
	{% IF controlAlign = "center" Then %}
		margin-left:auto;
		margin-right:auto;
	{% Else %}
		margin:0px;
		width:auto;
	{% EndIF %}

	margin-bottom:20px;
}

#adc_{%= CurrentADC.InstanceId%} .slider {
	position:relative;
	/*width:100%;*/
	/*margin:0px auto;*/
}

#adc_{%= CurrentADC.InstanceId%} .noUi-origin {
    border-radius: 0px;
}

#adc_{%= CurrentADC.InstanceId%} .slider tr, #adc_{%= CurrentADC.InstanceId%} .slider tr td {
	min-height:0;
}

#adc_{%= CurrentADC.InstanceId%} .sliderLabel {

	/* Decoration */
	{% IF CurrentADC.PropValue("borderThickness") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= borderThickness%} {%= borderStyle%} rgb({%= borderColour%});
	{% EndIF %}

	background-color: rgb({%= labelColourPrimary%});

	/* Effects */
	-webkit-border-radius:	{%= labelBorderRadius%};
	-moz-border-radius:		{%= labelBorderRadius%};
	-khtml-border-radius:	{%= labelBorderRadius%};
	border-radius:			{%= labelBorderRadius%};

	-webkit-box-shadow: {%= labelShadow%};
	-moz-box-shadow: {%= labelShadow%};
	box-shadow: {%= labelShadow%};

	display:{%= displayLabelText%};
	font-size:{%= fontSize%};
	{% IF CurrentADC.PropValue("textAlign") <> "lr" And CurrentADC.PropValue("textAlign") <> "rl" Then %}
		text-align:{%= textAlign%};
	{% End IF %}
	color:rgb({%= fontColour%});
	padding:{%= labelTextPadding%};
	line-height:{%= labelTextLineHeight%};

	position:relative;
	display:block;
}

#adc_{%= CurrentADC.InstanceId%} .left, #adc_{%= CurrentADC.InstanceId%} .right, .rightLabel, .leftLabel {
	width: {%= labelWidth%};
	position:relative;
	display:block;
}

#adc_{%= CurrentADC.InstanceId%} { width:100%; }
#adc_{%= CurrentADC.InstanceId%} .leftLabel {
	position:relative;
	display:block;
	margin: 0px;

	{% IF CurrentADC.PropValue("textAlign") = "lr" OR CurrentADC.PropValue("textAlign") = "left" Then %}
		text-align:left;
	{% ElseIF CurrentADC.PropValue("textAlign") = "rl" OR CurrentADC.PropValue("textAlign") = "right" Then %}
		text-align:right;
	{% ElseIF CurrentADC.PropValue("textAlign") = "center" Then %}
		text-align:center;
	{% EndIF %}
	{% IF CurrentADC.PropValue("sliderOrientation") = "horizontal" Then %}
		margin-right:10px;
	{% EndIF %}

	/* disable highlight text */
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select:none;
	user-select:none;
}
#adc_{%= CurrentADC.InstanceId%} .rightLabel {
	position:relative;
	display:block;
	margin: 0px;

	{% IF CurrentADC.PropValue("textAlign") = "lr" OR CurrentADC.PropValue("textAlign") = "right" Then %}
		text-align:right;
	{% ElseIF CurrentADC.PropValue("textAlign") = "rl" OR CurrentADC.PropValue("textAlign") = "left" Then %}
		text-align:left;
	{% ElseIF CurrentADC.PropValue("textAlign") = "center" Then %}
		text-align:center;
	{% EndIF %}

	{% IF CurrentADC.PropValue("sliderOrientation") = "horizontal" Then %}
		margin-left:10px;
	{% EndIF %}

	/* disable highlight text */
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select:none;
	user-select:none;
}
#adc_{%= CurrentADC.InstanceId%} .leftLabel .sliderLabel {
	position:relative;
	display:block;

	{% IF CurrentADC.PropValue("sliderOrientation") = "horizontal" Then %}
		/*margin-right:10px;*/
	{% Else %}
		margin-bottom:10px;
	{% EndIF %}
	{% IF CurrentADC.PropValue("textAlign") = "lr" Then %}
		text-align:left;
	{% ElseIF CurrentADC.PropValue("textAlign") = "rl" Then %}
		text-align:right;
	{% EndIF %}

	/* disable highlight text */
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select:none;
	user-select:none;
}
#adc_{%= CurrentADC.InstanceId%} .rightLabel .sliderLabel {
	position:relative;
	display:block;

	{% IF CurrentADC.PropValue("sliderOrientation") = "horizontal" Then %}
		/*margin-left:10px;*/
	{% Else %}
		margin-top:10px;
	{% EndIF %}
	{% IF CurrentADC.PropValue("textAlign") = "lr" Then %}
		text-align:right;
	{% ElseIF CurrentADC.PropValue("textAlign") = "rl" Then %}
		text-align:left;
	{% EndIF %}

	/* disable highlight text */
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select:none;
	user-select:none;
}

#adc_{%= CurrentADC.InstanceId%} .noUiSlider {
	{% IF CurrentADC.PropValue("sliderOrientation") = "vertical" Then %}
		display:block;
		height: {%= sliderHeight%};
	{% EndIF %}
	z-index:2;
}

#adc_{%= CurrentADC.InstanceId%} .noUiSlider,
#adc_{%= CurrentADC.InstanceId%} .leftLabel,
#adc_{%= CurrentADC.InstanceId%} .rightLabel {

}

#adc_{%= CurrentADC.InstanceId%} .noUi-target {
	/* border */
	{% IF CurrentADC.PropValue("sliderBaseBorderThickness") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= sliderBaseBorderThickness%} {%= sliderBaseBorderStyle%} rgb({%= sliderBaseBorderColour%});
	{% EndIF %}
	/* border-radius */
	-webkit-border-radius:	{%= sliderBaseBorderRadius%};
	-moz-border-radius:		{%= sliderBaseBorderRadius%};
	-khtml-border-radius:	{%= sliderBaseBorderRadius%};
	border-radius:			{%= sliderBaseBorderRadius%};
}

#adc_{%= CurrentADC.InstanceId%} .noUi-background {

	cursor:pointer;

	/* background */
	{% IF CurrentADC.PropValue("sliderBaseGradientDirection") <> "ttb" Then %}
		background: rgb({%= sliderBasePrimaryColour%});
		background: -moz-linear-gradient(left,  rgb({%= sliderBasePrimaryColour%}) 0%, rgb({%= sliderBaseSecondaryColour%}) 100%);
		background: -webkit-gradient(linear, left top, right top, color-stop(0%,rgb({%= sliderBasePrimaryColour%})), color-stop(100%,rgb({%= sliderBaseSecondaryColour%})));
		background: -webkit-linear-gradient(left,  rgb({%= sliderBasePrimaryColour%}) 0%,rgb({%= sliderBaseSecondaryColour%}) 100%);
		background: -o-linear-gradient(left,  rgb({%= sliderBasePrimaryColour%}) 0%,rgb({%= sliderBaseSecondaryColour%}) 100%);
		background: -ms-linear-gradient(left,  rgb({%= sliderBasePrimaryColour%}) 0%,rgb({%= sliderBaseSecondaryColour%}) 100%);
		{% IF CurrentADC.PropValue("sliderBaseGradientDirection") = "ltr" Then %}
			background: linear-gradient(to right,  rgb({%= sliderBasePrimaryColour%}) 0%,rgb({%= sliderBaseSecondaryColour%}) 100%);
		{% Else %}
			background: linear-gradient(to left,  rgb({%= sliderBasePrimaryColour%}) 0%,rgb({%= sliderBaseSecondaryColour%}) 100%);
		{% EndIF %}
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='{%= sliderBasePrimaryColour.ToHexa()%}', endColorstr='{%= sliderBaseSecondaryColour.ToHexa()%}',GradientType=1 );

	{% Else %}
		background: rgb({%= sliderBaseSecondaryColour%});
		background: -moz-linear-gradient(top,  rgb({%= sliderBaseSecondaryColour%}) 0%, rgb({%= sliderBasePrimaryColour%}) 100%);
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgb({%= sliderBaseSecondaryColour%})), color-stop(100%,rgb({%= sliderBasePrimaryColour%})));
		background: -webkit-linear-gradient(top,  rgb({%= sliderBaseSecondaryColour%}) 0%,rgb({%= sliderBasePrimaryColour%}) 100%);
		background: -o-linear-gradient(top,  rgb({%= sliderBaseSecondaryColour%}) 0%,rgb({%= sliderBasePrimaryColour%}) 100%);
		background: -ms-linear-gradient(top,  rgb({%= sliderBaseSecondaryColour%}) 0%,rgb({%= sliderBasePrimaryColour%}) 100%);
		background: linear-gradient(to bottom,  rgb({%= sliderBaseSecondaryColour%}) 0%,rgb({%= sliderBasePrimaryColour%}) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr={%= sliderBaseSecondaryColour.ToHexa()%}, endColorstr={%= sliderBasePrimaryColour.ToHexa()%},GradientType=0 );
	{% EndIF %}

	box-shadow:none;

	/*position:relative;*/
}

#adc_{%= CurrentADC.InstanceId%} .noUi-handle {

	cursor:pointer;

	/* border */
	{% IF CurrentADC.PropValue("sliderHandleBorderThickness") = "none" OR CurrentADC.PropValue("hideHandleBG") = "1" Then %}
		border: 0px solid transparent;
	{% Else %}
		border: {%= sliderHandleBorderThickness%} {%= sliderHandleBorderStyle%} rgb({%= sliderHandleBorderColour%});
	{% EndIF %}

	-webkit-box-shadow: {%= sliderHandleDropShadow%};
	-moz-box-shadow: {%= sliderHandleDropShadow%};
	box-shadow: {%= sliderHandleDropShadow%};

	/* border-radius */

	/* background */
	{% IF CurrentADC.PropValue("useHandleImage") <> "1" AND CurrentADC.PropValue("hideHandleBG") <> "1" Then %}
		background-color: rgb({%= sliderHandlePrimaryColour%});
	{% ElseIF CurrentADC.PropValue("hideHandleBG") = "1" Then %}
		background-color:transparent;
		box-shadow: none;
    	outline: none;
	{% EndIF %}

	-webkit-border-radius:	{%= sliderHandleBorderRadius%};
	-moz-border-radius:		{%= sliderHandleBorderRadius%};
	-khtml-border-radius:	{%= sliderHandleBorderRadius%};
	border-radius:			{%= sliderHandleBorderRadius%};

	/* disable highlight text */
	/*-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select:none;
	user-select:none;*/
}

#adc_{%= CurrentADC.InstanceId%} .selected .noUi-background {

	/* background */
    {% IF (CurrentADC.PropValue("sliderBaseGradientDirection") = "ltr") and (CurrentADC.PropValue("sliderConnect") <> "lower") Then %}
		background: rgb({%= sliderSelectedPrimaryColour%});
		background: -moz-linear-gradient(left,  rgb({%= sliderSelectedPrimaryColour%}) 0%, rgb({%= sliderSelectedSecondaryColour%}) 100%);
		background: -webkit-gradient(linear, left top, right top, color-stop(0%,rgb({%= sliderSelectedPrimaryColour%})), color-stop(100%,rgb({%= sliderSelectedSecondaryColour%})));
		background: -webkit-linear-gradient(left,  rgb({%= sliderSelectedPrimaryColour%}) 0%,rgb({%= sliderSelectedSecondaryColour%}) 100%);
		background: -o-linear-gradient(left,  rgb({%= sliderSelectedPrimaryColour%}) 0%,rgb({%= sliderSelectedSecondaryColour%}) 100%);
		background: -ms-linear-gradient(left,  rgb({%= sliderSelectedPrimaryColour%}) 0%,rgb({%= sliderSelectedSecondaryColour%}) 100%);
		background: linear-gradient(to right,  rgb({%= sliderSelectedPrimaryColour%}) 0%,rgb({%= sliderSelectedSecondaryColour%}) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='{%= sliderSelectedPrimaryColour.ToHexa()%}', endColorstr='{%= sliderSelectedSecondaryColour.ToHexa()%}',GradientType=1 );
	{% ElseIf (CurrentADC.PropValue("sliderBaseGradientDirection") <> "ltr") and (CurrentADC.PropValue("sliderConnect") <> "lower")  Then %}
		background: rgb({%= sliderSelectedSecondaryColour%});
		background: -moz-linear-gradient(top,  rgb({%= sliderSelectedSecondaryColour%}) 0%, rgb({%= sliderSelectedPrimaryColour%}) 100%);
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgb({%= sliderSelectedSecondaryColour%})), color-stop(100%,rgb({%= sliderSelectedPrimaryColour%})));
		background: -webkit-linear-gradient(top,  rgb({%= sliderSelectedSecondaryColour%}) 0%,rgb({%= sliderSelectedPrimaryColour%}) 100%);
		background: -o-linear-gradient(top,  rgb({%= sliderSelectedSecondaryColour%}) 0%,rgb({%= sliderSelectedPrimaryColour%}) 100%);
		background: -ms-linear-gradient(top,  rgb({%= sliderSelectedSecondaryColour%}) 0%,rgb({%= sliderSelectedPrimaryColour%}) 100%);
		background: linear-gradient(to bottom,  rgb({%= sliderSelectedSecondaryColour%}) 0%,rgb({%= sliderSelectedPrimaryColour%}) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='{%= sliderSelectedSecondaryColour.ToHexa()%}', endColorstr='{%= sliderSelectedPrimaryColour.ToHexa()%}',GradientType=0 );
	{% EndIF %}


	box-shadow: none;
}

#adc_{%= CurrentADC.InstanceId%} .noUi-connect {
    /* background */
    {% IF (CurrentADC.PropValue("sliderBaseGradientDirection") = "ltr") and (CurrentADC.PropValue("sliderConnect") = "lower") Then %}
		background: rgb({%= sliderSelectedPrimaryColour%});
		background: -moz-linear-gradient(left,  rgb({%= sliderSelectedPrimaryColour%}) 0%, rgb({%= sliderSelectedSecondaryColour%}) 100%);
		background: -webkit-gradient(linear, left top, right top, color-stop(0%,rgb({%= sliderSelectedPrimaryColour%})), color-stop(100%,rgb({%= sliderSelectedSecondaryColour%})));
		background: -webkit-linear-gradient(left,  rgb({%= sliderSelectedPrimaryColour%}) 0%,rgb({%= sliderSelectedSecondaryColour%}) 100%);
		background: -o-linear-gradient(left,  rgb({%= sliderSelectedPrimaryColour%}) 0%,rgb({%= sliderSelectedSecondaryColour%}) 100%);
		background: -ms-linear-gradient(left,  rgb({%= sliderSelectedPrimaryColour%}) 0%,rgb({%= sliderSelectedSecondaryColour%}) 100%);
		background: linear-gradient(to right,  rgb({%= sliderSelectedPrimaryColour%}) 0%,rgb({%= sliderSelectedSecondaryColour%}) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='{%= sliderSelectedPrimaryColour.ToHexa()%}', endColorstr='{%= sliderSelectedSecondaryColour.ToHexa()%}',GradientType=1 );
	{% ElseIf (CurrentADC.PropValue("sliderBaseGradientDirection") <> "ltr") and (CurrentADC.PropValue("sliderConnect") = "lower") Then %}
		background: rgb({%= sliderSelectedSecondaryColour%});
		background: -moz-linear-gradient(top,  rgb({%= sliderSelectedSecondaryColour%}) 0%, rgb({%= sliderSelectedPrimaryColour%}) 100%);
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgb({%= sliderSelectedSecondaryColour%})), color-stop(100%,rgb({%= sliderSelectedPrimaryColour%})));
		background: -webkit-linear-gradient(top,  rgb({%= sliderSelectedSecondaryColour%}) 0%,rgb({%= sliderSelectedPrimaryColour%}) 100%);
		background: -o-linear-gradient(top,  rgb({%= sliderSelectedSecondaryColour%}) 0%,rgb({%= sliderSelectedPrimaryColour%}) 100%);
		background: -ms-linear-gradient(top,  rgb({%= sliderSelectedSecondaryColour%}) 0%,rgb({%= sliderSelectedPrimaryColour%}) 100%);
		background: linear-gradient(to bottom,  rgb({%= sliderSelectedSecondaryColour%}) 0%,rgb({%= sliderSelectedPrimaryColour%}) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='{%= sliderSelectedSecondaryColour.ToHexa()%}', endColorstr='{%= sliderSelectedPrimaryColour.ToHexa()%}',GradientType=0 );
	{% EndIF %}
}

#adc_{%= CurrentADC.InstanceId%} .noUi-handle:after, .noUi-handle:before {
		background:none !important;
}

#adc_{%= CurrentADC.InstanceId%} .handleValue {
	width:100%;
	text-align:center;
	font-size: .8rem;
	color:rgb({%= handleFontColour%});
	line-height:100%;
	pointer-events: none;

	/* disable highlight text */
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select:none;
	user-select:none;
}

#adc_{%= CurrentADC.InstanceId%} .focused .noUi-handle {

	/* background */
	{% IF CurrentADC.PropValue("useHandleImage") <> "1" Then %}
		background-color: rgb({%= sliderFocusPrimaryColour%});
	{% ElseIF CurrentADC.PropValue("useHandleImage") = "1" AND CurrentADC.PropValue("hideHandleBG") <> "1" Then %}
	 	background-color: rgb({%= sliderFocusPrimaryColour%});
	{% ElseIF CurrentADC.PropValue("useHandleImage") <> "1" AND CurrentADC.PropValue("hideHandleBG") = "1" Then %}
		background-color:none;
	{% EndIF %}

	-webkit-box-shadow: {%= sliderHandleDropShadow%};
	-moz-box-shadow: {%= sliderHandleDropShadow%};
	box-shadow: {%= sliderHandleDropShadow%};

	/* border */

	{% IF CurrentADC.PropValue("sliderFocusBorderThickness") = "none" OR CurrentADC.PropValue("hideHandleBG") = "1" Then %}
		border: none;
	{% Else %}
		border: {%= sliderFocusBorderThickness%} {%= sliderHandleBorderStyle%} rgb({%= sliderFocusBorderColour%});
	{% EndIF %}
}

#adc_{%= CurrentADC.InstanceId%} .caption {
	position:relative;
	text-align:{%= captionAlign%};
	font-size:{%= fontSize%};
	padding:{%= captionPadding%};
    {% IF CurrentADC.PropValue("hideCaption") = "1" Then %}
    display:none;
    {% EndIF %}
}

#adc_{%= CurrentADC.InstanceId%} .noUi-horizontal {
	height: {%= sliderBaseHeight%}px;
}
#adc_{%= CurrentADC.InstanceId%} .noUi-horizontal .noUi-handle {
	width: {%= sliderHandleWidth%}px;
	height: {%= sliderHandleHeight%}px;
	left: -{%= halfHandleWidth%}px;
	top: {%= halfHandleHeight%}px; /* Coming out as -- */
}
#adc_{%= CurrentADC.InstanceId%} .noUi-vertical {
	width: {%= sliderBaseHeight%}px;
}
#adc_{%= CurrentADC.InstanceId%} .noUi-vertical .noUi-handle {
	width: {%= sliderHandleWidth%}px;
	height: {%= sliderHandleHeight%}px;
	left: -{%= halfHandleWidth%}px;
	top: {%= halfHandleHeight%}px; /* Coming out as -- */
}

#adc_{%= CurrentADC.InstanceId%} img {
	padding:{%= imagePadding%};
	vertical-align: middle;

}

#adc_{%= CurrentADC.InstanceId%} .dk {
	cursor:pointer;

	display:inline-block;
	*display: inline;
    zoom: 1;
	/* Decoration */
	{% IF CurrentADC.PropValue("dkBorderThickness") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= dkBorderThickness%} {%= dkBorderStyle%} rgb({%= dkBorderColour%});
	{% EndIF %}
	background-color: rgb({%= dkColourPrimary%});

	/* Effects */
	-webkit-border-radius:	{%= dkBorderRadius%};
	-moz-border-radius:		{%= dkBorderRadius%};
	-khtml-border-radius:	{%= dkBorderRadius%};
	border-radius:			{%= dkBorderRadius%};

	-webkit-box-shadow: {%= dkShadow%};
	-moz-box-shadow: {%= dkShadow%};
	box-shadow: {%= dkShadow%};

	padding: {%= dkTextPadding%};

	color: rgb({%= dkFontColour%});

	margin: {%= dkMargin%};

	/* disable highlight text */
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select:none;
	user-select:none;
}

#adc_{%= CurrentADC.InstanceId%} .dk:hover
{
    /* Decoration */
    {% IF (CurrentADC.PropValue("dkHoverBorderThickness") = "none") and (CurrentADC.PropValue("showDkHoverBorder") = "1") Then %}
	border: none;
    {% ElseIf (CurrentADC.PropValue("dkHoverBorderThickness") <> "none") and (CurrentADC.PropValue("showDkHoverBorder") = "1") Then %}
    border: {%= dkHoverBorderThickness%} {%= dkHoverBorderStyle%} rgb({%= dkHoverBorderColour%});
	{% EndIF %}
    {% IF CurrentADC.PropValue("showDkHoverColour") = "1" Then %}
    background-color: rgb({%= dkHoverColourPrimary%});
	{% EndIF %}
    -webkit-box-shadow: {%= dkHoverShadow%};
    -moz-box-shadow: {%= dkHoverShadow%};
    box-shadow: {%= dkHoverShadow%};

    {% IF CurrentADC.PropValue("showDkHoverFontColour") = "1" Then %}
    color:rgb({%= dkHoverFontColour%});
    {% EndIF %}
}

#adc_{%= CurrentADC.InstanceId%} .dk.selected, #adc_{%= CurrentADC.InstanceId%} .dk:hover.selected
{
    /* Decoration */
	{% IF CurrentADC.PropValue("dkSelectedBorderThickness") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= dkSelectedBorderThickness%} {%= dkSelectedBorderStyle%} rgb({%= dkSelectedBorderColour%});
	{% EndIF %}
	background-color: rgb({%= dkSelectedColourPrimary%});

	-webkit-box-shadow: {%= dkSelectedShadow%};
	-moz-box-shadow: {%= dkSelectedShadow%};
	box-shadow: {%= dkSelectedShadow%};

    color:rgb({%= dkSelectedFontColour%});
}

/* Contain handle within slider */

#adc_{%= CurrentADC.InstanceId%} .noUi-horizontal.noUi-extended {
	position:relative;
	padding-right: {%= sliderHandleWidth.ToNumber() - 2%}px;
}
#adc_{%= CurrentADC.InstanceId%} .noUi-horizontal.noUi-extended .noUi-handle {
	left: -1px;
}
#adc_{%= CurrentADC.InstanceId%} .noUi-horizontal.noUi-extended .noUi-origin  {
	right: -{%= sliderHandleWidth.ToNumber() - 2%}px;
}


#adc_{%= CurrentADC.InstanceId%} .noUi-vertical.noUi-extended {
	position:relative;
    padding-bottom: {%= sliderHandleHeight.ToNumber() - 2%}px;
}
#adc_{%= CurrentADC.InstanceId%} .noUi-vertical.noUi-extended .noUi-handle {
	top: -1px;
}
#adc_{%= CurrentADC.InstanceId%} .noUi-vertical.noUi-extended .noUi-origin  {
	bottom: -{%= sliderHandleHeight.ToNumber() - 2%}px;
}

#adc_{%= CurrentADC.InstanceId%} .noUi-value {
    {% IF CurrentADC.PropValue("showMarkerText") <> "1" Then %}
    	display:none;
  	{% EndIF %}
		{% IF CurrentADC.PropValue("showResponseCaptions") = "1" Then %}
		/* transform: rotate(-90deg); */
  	{% EndIF %}
}

#adc_{%= CurrentADC.InstanceId%} .noUi-value-horizontal{
	{% IF CurrentADC.PropValue("showResponseCaptions") = "1" Then %}
		/* padding-top: 25px; */
		/* margin-left: -30px; */
	{% EndIF %}
}

#adc_{%= CurrentADC.InstanceId%} .noUi-marker-normal {
    {% IF CurrentADC.PropValue("showSubMarkers") <> "1" Then %}
    	display:none;
  	{% EndIF %}
}
#adc_{%= CurrentADC.InstanceId%} .freezeLabel {
    {% IF (CurrentADC.PropValue("showMarkers") = "1" and CurrentADC.PropValue("showMarkerText") = "1") Then %}
    	margin-top: 25px;
    {% ElseIf (CurrentADC.PropValue("showMarkers") = "1" and CurrentADC.PropValue("showMarkerText") = "0") Then %}
    	margin-top: 15px;
    {% Else %}
    	margin-top: 0px;
  	{% EndIF %}
}

#adc_{%= CurrentADC.InstanceId%} .noUi-marker-large, #adc_{%= CurrentADC.InstanceId%} .noUi-marker-sub {
	background: rgb({%= markerColor %}) !important;
}
#adc_{%= CurrentADC.InstanceId%} .noUi-marker {
	background: rgb({%= markerColor %}) !important;
}
#adc_{%= CurrentADC.InstanceId%} .noUi-pips {
	color: rgb({%= markerColor %}) !important;
}

#adc_{%= CurrentADC.InstanceId%} .headerGroupWrap {
	border: 1px solid rgb({%= headerGroupBorderColor %});
	padding: {%= headerGroupPadding %}
}

#adc_{%= CurrentADC.InstanceId%} .headerLabel {
		background-color: rgb({%= headerColourPrimary %}) !important;
		border: 1px solid rgb({%= headerColourPrimary %});
		cursor: pointer;
		font-weight: bold;
		color: rgb({%= headerFontColour %}) !important;
		z-index: 0;
		box-sizing: border-box;
	  padding: 5px 15px 5px 15px;
	  text-align: {%= headerTextAlign %};
		margin-bottom: 0px;
}

#adc_{%= CurrentADC.InstanceId%} .headerLabel:hover {
	background-color: rgb({%= headerHoverColourPrimary %}) !important;
}

.plus::after {
	content: '\002B';
  color: rgb({%= headerFontColour %});
  font-weight: bold;
  float: {%= symbolPosition %};
}

.minus::after {
	content: "\2212";
	color: rgb({%= headerFontColour %});
  font-weight: bold;
	float: {%= symbolPosition %};
}

/* tooltips */
#adc_{%= CurrentADC.InstanceId%} .tippy-tooltip {
	background-color: {%= Theme.PrimaryDarkColor.ToString().ToHexa() %} !important;
    border: 2px solid {%= Theme.PrimaryLightColor.ToString().ToHexa() %} !important;
}
#adc_{%= CurrentADC.InstanceId%} .tippy-tooltip .tippy-tooltip-content {
	color: {%= Theme.WhiteColor.ToString().ToHexa() %} !important;
}
